{"name":"matlab-xunit","tagline":"xUnit for Matlab with JUnit-compatible XML output","body":"Testing is wonderful! Let's make it easier and more rewarding!\r\n\r\nThe most popular testing platform for MATLAB functions and classes is/was Steve Eddins' excellent [Matlab xUnit](http://www.mathworks.com/matlabcentral/fileexchange/22846-matlab-xunit-test-framework) package.\r\n\r\nThe previous maintainer, [Thomas Smith](https://github.com/tgs/), made two additions to that package: the ability to give output in a JUnit-compatible XML format, and the ability to run DocTests, similar to the ``doctest`` module in Python or vignettes in R.\r\n\r\nI've made one additional change: renaming ``runtests`` to ``runxunit`` so that it's compatible with MATLAB R2013a and newer. (``runtests`` is now a built-in function.)\r\n\r\n# XML Output\r\n\r\nWhy would you want to do that?  Well, because other tools understand it. In particular, I'm using the Jenkins continuous integration system (http://jenkins-ci.org/) to automatically run unit tests when I check in code. Jenkins understands JUnit's XML report format, and can display it in very nice ways. By creating a test report file in the same format, we can leverage all of that.\r\n\r\nFor example, here's a screenshot of the table Jenkins generates from a single build's report:\r\n\r\n![Jenkins test results](doc/images/jenkins_test_results.png)\r\n\r\nAnd here's a graph of the test trend:\r\n\r\n![Jenkins trend graph](doc/images/jenkins_trend_graph.png)\r\n\r\nThe implementation is based on [xml_io_tools](http://www.mathworks.com/matlabcentral/fileexchange/12907-xmliotools) by Jaroslaw Tuszynski, which is a nice way to generate XML in Matlab. It uses about 1/3 the lines of code as Matlab's built-in ``xmlwrite``.\r\n\r\n## Usage\r\n\r\nTo use this feature, clone or download this from GitHub, and put the ``xunit-matlab/xunit`` directory on your MATLAB path (using ``addpath``).\r\n\r\nOnce you've written some unit tests (see [xUnit's help](https://cdn.rawgit.com/psexton/matlab-xunit/master/doc/xunit_product_page.html)), you can then run:\r\n\r\n    runxunit path/to/test/dir -xmlfile testreport.xml\r\n\r\nUnsurprisingly, this will run your unit tests and put the results into ``testreport.xml`` in the current directory.\r\n\r\n## Usage with Jenkins\r\n\r\nOK, this is really cool, but involves some setup. First, you're going to have to either install Jenkins on the machine that has Matlab, or give Jenkins remote access to that machine (there may be Matlab licensing issues to this, I have no idea). As a note, installing Jenkins is incredibly easy: you download one file and run one command.\r\n\r\nNow, you need to create a job that checks out your code from Subversion or whatever, and then runs your tests. I'm not going to run you through the whole thing, but here are the two important points:\r\n\r\nFirst, you need a build step that will run the tests. Mine looks something like this:\r\n\r\n    /path/to/matlab -nodisplay -r \"try; \\\r\n        addpath /path/to/xunit-matlab-doctest/xunit; \\\r\n        runxunit -xmlfile testreport.xml the_tests/; \\\r\n      catch Ex; fprintf(2, Ex.getReport()); quit(1); end; \\\r\n      quit(0);\"\r\n  \r\nAnd second, you need to check the Jenkins box that says \"Publish JUnit test result report.\" I tell it to look at ``**/testreport.xml``.\r\n\r\nNow save the configuration, tell the project to Build Now, and you should have a lovely display of what tests were run, and which failed!\r\n\r\n# DocTests\r\n\r\n_As of version 4.0.0, DocTests is no longer part of the \"core\" matlab-xunit and lives in its own repository at [matlab-xunit-doctests](https://github.com/psexton/matlab-xunit-doctests)._\r\n\r\n# Versioning\r\n\r\nThis codebase is over 5 years old now, and has had several maintainers, so past versioning is kind of a mess. Starting with version 4.0.0, it follows [Semantic Versioning](http://semver.org) for versions, and [Semanticly Versioned Names](http://semvername.org) for tags and releases.\r\n\r\n# Contributing\r\n\r\n1. Fork it ( https://github.com/psexton/matlab-xunit/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request \r\n\r\n#License\r\n\r\n[BSD 3-Clause](http://opensource.org/licenses/BSD-3-Clause)\r\n\r\n","google":"UA-51498927-2","note":"Don't delete this file! It's used internally to help with page regeneration."}